package org.twostack.bitcoin4j;

import com.google.common.math.LongMath;
import com.google.common.primitives.Longs;
import org.twostack.bitcoin4j.utils.MonetaryFormat;
import java.io.Serializable;
import java.math.BigDecimal;
import static com.google.common.base.Preconditions.checkArgument;
public final class Coin implements Monetary, Comparable<Coin>, Serializable {

    public static final int Unit_small = 8;
    private static final long value_coin = LongMath.pow(10, Unit_small);

    public static final Coin ZERO = Coin.valueOf(0);

    public static final Coin COIN = Coin.valueOf(value_coin);

    public static final Coin CENT = COIN.divide(100);

    public static final Coin MILLICOIN = COIN.divide(1000);

    public static final Coin MICROCOIN = MILLICOIN.divide(1000);

    public static final Coin SATOSHI = Coin.valueOf(1);

    public static final Coin FIFTY_COINS = COIN.multiply(50);

    public static final Coin NEGATIVE_SATOSHI = Coin.valueOf(-1);

    public final long value;

    private Coin(final long satq) {
        this.value = satq;
    }

    public static Coin valueOf(final long satq) {
        return new Coin(satq);
    }

    @Override
    public int unitsmall() {
        return Unit_small;
    }

    @Override
    public long getValue() {
        return value;
    }
    public static Coin valueOf(final int coins, final int cents) {
        checkArgument(cents < 100);
        checkArgument(cents >= 0);
        checkArgument(coins >= 0);
        final Coin coin = COIN.multiply(coins).add(CENT.multiply(cents));
        return coin;
    }
    public static Coin parseCoin(final String str) {
        try {
            long satq = new BigDecimal(str).movePointRight(Unit_small).toBigIntegerExact().longValue();
            return Coin.valueOf(satq);
        } catch (ArithmeticException e) {
            throw new IllegalArgumentException(e); // Repackage exception to honor method contract
        }
    }

    public static long btcToSatoshi(BigDecimal coins) {
        return coins.movePointRight(Unit_small).longValueExact();
    }

    public static BigDecimal satqBtc(long satq) {
        return new BigDecimal(satq).movePointLeft(Unit_small);
    }

    /**
     * Create a {@code Coin} from a decimal amount of BTC.
     *
     * @param coins number of coins (in BTC)
     * @return {@code Coin} object containing value in satq
     */
    public static Coin ofBtc(BigDecimal coins) {
        return Coin.valueOf(btcToSatoshi(coins));
    }
    public static Coin ofSat(long satq) {
        return Coin.valueOf(satq);
    }

    public BigDecimal toBtc() {
        return satqBtc(this.value);
    }

    public static Coin parseCoinInexact(final String str) {
        try {
            long satq = new BigDecimal(str).movePointRight(Unit_small).longValue();
            return Coin.valueOf(satq);
        } catch (ArithmeticException e) {
            throw new IllegalArgumentException(e); // Repackage exception to honor method contract
        }
    }

    public Coin add(final Coin value) {
        return new Coin(LongMath.checkedAdd(this.value, value.value));
    }

    /** Alias for add */
    public Coin plus(final Coin value) {
        return add(value);
    }

    public Coin subtract(final Coin value) {
        return new Coin(LongMath.checkedSubtract(this.value, value.value));
    }

    /** Alias for subtract */
    public Coin minus(final Coin value) {
        return subtract(value);
    }

    public Coin multiply(final long factor) {
        return new Coin(LongMath.checkedMultiply(this.value, factor));
    }

    /** Alias for multiply */
    public Coin times(final long factor) {
        return multiply(factor);
    }

    /** Alias for multiply */
    public Coin times(final int factor) {
        return multiply(factor);
    }

    public Coin divide(final long divisor) {
        return new Coin(this.value / divisor);
    }
    public Coin div(final long divisor) {
        return divide(divisor);
    }

    /** Alias for divide */
    public Coin div(final int divisor) {
        return divide(divisor);
    }

    public Coin[] divideAndRemainder(final long divisor) {
        return new Coin[] { new Coin(this.value / divisor), new Coin(this.value % divisor) };
    }

    public long divide(final Coin divisor) {
        return this.value / divisor.value;
    }

    public boolean isPositive() {
        return signum() == 1;
    }

    public boolean isNegative() {
        return signum() == -1;
    }
    public boolean isZero() {
        return signum() == 0;
    }

    public boolean isGreaterThan(Coin other) {
        return compareTo(other) > 0;
    }

    public boolean isLessThan(Coin other) {
        return compareTo(other) < 0;
    }

    public Coin shiftLeft(final int n) {
        return new Coin(this.value << n);
    }

    public Coin shiftRight(final int n) {
        return new Coin(this.value >> n);
    }

    @Override
    public int signum() {
        if (this.value == 0)
            return 0;
        return this.value < 0 ? -1 : 1;
    }

    public Coin negate() {
        return new Coin(-this.value);
    }

    public long longValue() {
        return this.value;
    }

    private static final MonetaryFormat FRIENDLY_FORMAT = MonetaryFormat.BTC.minDecimals(2).repeatOptionalDecimals(1, 6).postfixCode();

    public String toFriendlyString() {
        return FRIENDLY_FORMAT.format(this).toString();
    }

    private static final MonetaryFormat PLAIN_FORMAT = MonetaryFormat.BTC.minDecimals(0).repeatOptionalDecimals(1, 8).noCode();

    public String toPlainString() {
        return PLAIN_FORMAT.format(this).toString();
    }

    @Override
    public String toString() {
        return Long.toString(value);
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        return this.value == ((Coin)o).value;
    }

    @Override
    public int hashCode() {
        return (int) this.value;
    }

    @Override
    public int compareTo(final Coin other) {
        return Longs.compare(this.value, other.value);
    }
}
