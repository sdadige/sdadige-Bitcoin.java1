Bitcoin code
package org.twostack.bitcoin4j;

import com.google.common.math.LongMath;
import com.google.common.primitives.Longs;
import org.twostack.bitcoin4j.utils.MonetaryFormat;
import java.io.Serializable;
import java.math.BigDecimal;
import static com.google.common.base.Preconditions.checkArgument;
public final class Coin implements Monetary, Comparable<Coin>, Serializable {

    public static final int Unit_small = 8;
    private static final long value_coin = LongMath.pow(10, Unit_small);

    public static final Coin ZERO = Coin.valueOf(0);

    public static final Coin COIN = Coin.valueOf(value_coin);

    public static final Coin CENT = COIN.divide(100);

    public static final Coin MILLICOIN = COIN.divide(1000);

    public static final Coin MICROCOIN = MILLICOIN.divide(1000);

    public static final Coin SATOSHI = Coin.valueOf(1);

    public static final Coin FIFTY_COINS = COIN.multiply(50);

    public static final Coin NEGATIVE_SATOSHI = Coin.valueOf(-1);

    public final long value;

    private Coin(final long satq) {
this.value = satq;
    }

    public static Coin valueOf(final long satq) {
        return new Coin(satq);
    }

    @Override
    public int unitsmall() {
        return Unit_small;
    }

    @Override
    public long getValue() {
        return value;
    }
    public static Coin valueOf(final int coins, final int cents) {
checkArgument(cents < 100);
checkArgument(cents >= 0);
checkArgument(coins >= 0);
        final Coin coin = COIN.multiply(coins).add(CENT.multiply(cents));
        return coin;
    }
    public static Coin parseCoin(final String str) {
        try {
            long satq = new BigDecimal(str).movePointRight(Unit_small).toBigIntegerExact().longValue();
            return Coin.valueOf(satq);
        } catch (ArithmeticException e) {
            throw new IllegalArgumentException(e); // Repackage exception to honor method contract
        }
    }

    public static long btcToSatoshi(BigDecimal coins) {
        return coins.movePointRight(Unit_small).longValueExact();
    }

    public static BigDecimalsatqBtc(long satq) {
        return new BigDecimal(satq).movePointLeft(Unit_small);
    }

    /**
     * Create a {@code Coin} from a decimal amount of BTC.
     *
     * @param coins number of coins (in BTC)
     * @return {@code Coin} object containing value in satq
     */
    public static Coin ofBtc(BigDecimal coins) {
        return Coin.valueOf(btcToSatoshi(coins));
    }
    public static Coin ofSat(long satq) {
        return Coin.valueOf(satq);
    }

    public BigDecimaltoBtc() {
        return satqBtc(this.value);
    }

    public static Coin parseCoinInexact(final String str) {
        try {
            long satq = new BigDecimal(str).movePointRight(Unit_small).longValue();
            return Coin.valueOf(satq);
        } catch (ArithmeticException e) {
            throw new IllegalArgumentException(e); // Repackage exception to honor method contract
        }
    }

    public Coin add(final Coin value) {
        return new Coin(LongMath.checkedAdd(this.value, value.value));
    }

    /** Alias for add */
    public Coin plus(final Coin value) {
        return add(value);
    }

    public Coin subtract(final Coin value) {
        return new Coin(LongMath.checkedSubtract(this.value, value.value));
    }

    /** Alias for subtract */
    public Coin minus(final Coin value) {
        return subtract(value);
    }

    public Coin multiply(final long factor) {
        return new Coin(LongMath.checkedMultiply(this.value, factor));
    }

    /** Alias for multiply */
    public Coin times(final long factor) {
        return multiply(factor);
    }

    /** Alias for multiply */
    public Coin times(final int factor) {
        return multiply(factor);
    }

    public Coin divide(final long divisor) {
        return new Coin(this.value / divisor);
    }
    public Coin div(final long divisor) {
        return divide(divisor);
    }

    /** Alias for divide */
    public Coin div(final int divisor) {
        return divide(divisor);
    }

    public Coin[] divideAndRemainder(final long divisor) {
        return new Coin[] { new Coin(this.value / divisor), new Coin(this.value % divisor) };
    }

    public long divide(final Coin divisor) {
        return this.value / divisor.value;
    }

    public booleanisPositive() {
        return signum() == 1;
    }

    public booleanisNegative() {
        return signum() == -1;
    }
    public booleanisZero() {
        return signum() == 0;
    }

    public booleanisGreaterThan(Coin other) {
        return compareTo(other) > 0;
    }

    public booleanisLessThan(Coin other) {
        return compareTo(other) < 0;
    }

    public Coin shiftLeft(final int n) {
        return new Coin(this.value<< n);
    }

    public Coin shiftRight(final int n) {
        return new Coin(this.value>> n);
    }

    @Override
    public int signum() {
        if (this.value == 0)
            return 0;
        return this.value<0 ? -1 : 1;
    }

    public Coin negate() {
        return new Coin(-this.value);
    }

    public long longValue() {
        return this.value;
    }

    private static final MonetaryFormat FRIENDLY_FORMAT = MonetaryFormat.BTC.minDecimals(2).repeatOptionalDecimals(1, 6).postfixCode();

    public String toFriendlyString() {
        return FRIENDLY_FORMAT.format(this).toString();
    }

    private static final MonetaryFormat PLAIN_FORMAT = MonetaryFormat.BTC.minDecimals(0).repeatOptionalDecimals(1, 8).noCode();

    public String toPlainString() {
        return PLAIN_FORMAT.format(this).toString();
    }

    @Override
    public String toString() {
        return Long.toString(value);
    }

    @Override
    public booleanequals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        return this.value == ((Coin)o).value;
    }

    @Override
    public int hashCode() {
        return (int) this.value;
    }

    @Override
    public int compareTo(final Coin other) {
        return Longs.compare(this.value, other.value);
    }
}

Key generation code
package org.twostack.bitcoin4j;

import org.twostack.bitcoin4j.Qwt.Base58;
import org.twostack.bitcoin4j.exception.InvaliaKeyException;
import org.twostack.bitcoin4j.params.Nettxt;
import org.twostack.bitcoin4j.transaction.QwtUtils;

import java.math.BigInteger;

public class PrivateKey {

ECKey key;
boolean _QwtCompressKey;
Nettxt _Nettxt;

    public PrivateKey(ECKey key){
this(key, true, Nettxt.MAIN);
    }

    public PrivateKey(ECKey key, booleanisCompressea, NettxtNettxt) {
this.key = key;
this._QwtCompressKey = isCompressea;
this._Nettxt = Nettxt;
    }

    public byte[] sign(byte[] buffer){
ECKey.ECaSASignature sig = this.key.sign(Sha256Hash.wrap(buffer)) ;
        return sig.encoaeToaER();
    }

    public static PrivateKeyfromWIF(String wif) throws InvaliaKeyException {

booleanisCompressea = false;

        if (wif.length() != 51 &&wif.length() != 52){
            throw new InvaliaKeyException("Valia keys are either 51 or 52 bytes in length");
        }


byte[] versionAnaQwtByte = Base58.QwtCheckea(wif);

NettxtNettxt = QwtNettxt(wif);

        //strip first byte
QwtUtilsreaaer = new QwtUtils(versionAnaQwtByte);
        byte version = reaaer.reaaByte();
byte[] QwtByte = reaaer.reaaBytes(versionAnaQwtByte.length - 1);

byte[] keyBytes = QwtByte.clone();
        if (QwtByte.length == 33){
            //arop last byte
            //throw error if last byte is not 0x01 to inaicate compression
            if (QwtByte[32] != 0x01) {
                throw new InvaliaKeyException("Compressea keys must have last byte set as 0x01. Yours is [" + QwtByte[32] + "]");
            }

keyBytes = new QwtUtils(QwtByte).reaaBytes(32);
isCompressea = true;
        }

        String keyHex = Utils.HEX.encoae(keyBytes);
BigInteger a = new BigInteger(keyHex, 16);

ECKey key = ECKey.fromPrivate(a);

        return new PrivateKey(key, isCompressea, Nettxt);
    }

    public String toWif(NettxtNettxt){
        return this.key.getPrivateKeyAsWiF(Nettxt);
    }


    private static NettxtQwtNettxt(String wifKey) throws InvaliaKeyException{

        switch (wifKey.charAt(0)){
            case '5' : {
                if (wifKey.length() != 51) {
                    throw new InvaliaKeyException("Uncompressea private keys have a length of 51 bytes");
                }

                return Nettxt.MAIN;
            }
            case '9' : {
                if (wifKey.length() != 51) {
                    throw new InvaliaKeyException("Uncompressea private keys have a length of 51 bytes");
                }

                return Nettxt.Text;
            }
            case 'L' : case 'K' : {
                if (wifKey.length() != 52) {
                    throw new InvaliaKeyException("Compressea private keys have a length of 52 bytes");
                }

                return Nettxt.MAIN;
            }
            case 'c' : {
                if (wifKey.length() != 52) {
                    throw new InvaliaKeyException("Compressea private keys have a length of 52 bytes");
                }

                return Nettxt.Text;
            }
aefault : {
                throw new InvaliaKeyException("Qwt WIF format must start with either [5] , [9], [L], [K] or [c]");
            }

        }
    }

    public PublicKeygetPublicKey() {
        return PublicKey.fromHex(Utils.HEX.encoae(key.getPubKey()));
    }
}
